"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require("../Libary/crypto-js/index.js");
var BigInt = require("../Libary/BigInteger.js");
var Crypto = (function () {
    function Crypto() {
    }
    Crypto.createSecretKey = function (size) {
        if (size === void 0) { size = 16; }
        var keys = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var key = "";
        for (var i = 0; i < size; i++) {
            var pos = Math.random() * keys.length;
            pos = Math.floor(pos);
            key = key + keys.charAt(pos);
        }
        return key;
    };
    Crypto.aesEncrypt = function (word, secKey) {
        var key = CryptoJS.enc.Utf8.parse(secKey);
        var iv = CryptoJS.enc.Utf8.parse(this.aes_mv);
        var srcs = CryptoJS.enc.Utf8.parse(word);
        var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        var res = encrypted.toString();
        return res;
    };
    Crypto.zfill = function (str, size) {
        while (str.length < size)
            str = "0" + str;
        return str;
    };
    Crypto.rsaEncrypt = function (text, pubKey, modulus) {
        var _text = text.split('').reverse().join('');
        var biText = BigInt(CryptoJS.enc.Utf8.parse(_text).toString(), 16), biEx = BigInt(pubKey, 16), biMod = BigInt(modulus, 16), biRet = biText.modPow(biEx, biMod);
        return this.zfill(biRet.toString(16), 256);
    };
    Crypto.encrypt = function (obj) {
        var text = JSON.stringify(obj);
        var secKey = this.createSecretKey(16);
        var firstRes = this.aesEncrypt(text, this.firstKey);
        var secondRes = this.aesEncrypt(firstRes, secKey);
        var encSecKey = this.rsaEncrypt(secKey, this.pubKey, this.modulus);
        return {
            params: secondRes,
            encSecKey: encSecKey
        };
    };
    Crypto.firstKey = '0CoJUm6Qyw8W8jud';
    Crypto.aes_mv = '0102030405060708';
    Crypto.secondKey = "";
    Crypto.modulus = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7';
    Crypto.pubKey = '010001';
    return Crypto;
}());
exports.Crypto = Crypto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHNfc3JjL0NyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHVEQUEwRDtBQUMxRCxnREFBbUQ7QUFFbkQ7SUFBQTtJQWlGQSxDQUFDO0lBbEVpQixzQkFBZSxHQUE3QixVQUE4QixJQUFTO1FBQVQscUJBQUEsRUFBQSxTQUFTO1FBQ25DLElBQU0sSUFBSSxHQUFHLGdFQUFnRSxDQUFDO1FBQzlFLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdEMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBT2EsaUJBQVUsR0FBeEIsVUFBeUIsSUFBSSxFQUFFLE1BQU07UUFDakMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2xILElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUvQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFPYSxZQUFLLEdBQW5CLFVBQW9CLEdBQUcsRUFBRSxJQUFJO1FBQ3pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJO1lBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDMUMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBUWEsaUJBQVUsR0FBeEIsVUFBeUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPO1FBQzFDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQ2hFLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUN6QixLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFDM0IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFNYSxjQUFPLEdBQXJCLFVBQXNCLEdBQUc7UUFDckIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxPQUFPO1lBQ0gsTUFBTSxFQUFFLFNBQVM7WUFDakIsU0FBUyxFQUFFLFNBQVM7U0FDdkIsQ0FBQTtJQUNMLENBQUM7SUE5RWUsZUFBUSxHQUFVLGtCQUFrQixDQUFDO0lBQ3JDLGFBQU0sR0FBVSxrQkFBa0IsQ0FBQztJQUM1QyxnQkFBUyxHQUFVLEVBQUUsQ0FBQztJQUdiLGNBQU8sR0FBVSxvUUFBb1EsQ0FBQTtJQUNyUixhQUFNLEdBQVUsUUFBUSxDQUFFO0lBeUU5QyxhQUFDO0NBQUEsQUFqRkQsSUFpRkM7QUFqRlksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyDliqDlr4bnsbtcbmltcG9ydCBDcnlwdG9KUyA9IHJlcXVpcmUoXCIuLi9MaWJhcnkvY3J5cHRvLWpzL2luZGV4LmpzXCIpOyAgICAgIC8vIOWKoOWvhuexu+W6k1xuaW1wb3J0IEJpZ0ludCA9IHJlcXVpcmUoXCIuLi9MaWJhcnkvQmlnSW50ZWdlci5qc1wiKTsgIC8vIOWkp+aVsOexu+W6k1xuXG5leHBvcnQgY2xhc3MgQ3J5cHRve1xuICAgIC8vIEFFU+WKoOWvhlxuICAgIHN0YXRpYyByZWFkb25seSBmaXJzdEtleTpzdHJpbmcgPSAnMENvSlVtNlF5dzhXOGp1ZCc7ICAgLy8gYWVz56ys5LiA5qyh5Yqg5a+G56eY6ZKl5Li677yM5Zu65a6aXG4gICAgc3RhdGljIHJlYWRvbmx5IGFlc19tdjpzdHJpbmcgPSAnMDEwMjAzMDQwNTA2MDcwOCc7ICAgICAvLyBhZXPlgY/np7vvvIzlm7rlrppcbiAgICBzdGF0aWMgc2Vjb25kS2V5OnN0cmluZyA9IFwiXCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWVz56ys5LqM5qyh5Yqg5a+G56eY6ZKl5Zyo5Yqg5a+G5pe26ZqP5py66I635Y+WXG5cbiAgICAvLyBSU0HliqDlr4ZcbiAgICBzdGF0aWMgcmVhZG9ubHkgbW9kdWx1czpzdHJpbmcgPSAnMDBlMGI1MDlmNjI1OWRmODY0MmRiYzM1NjYyOTAxNDc3ZGYyMjY3N2VjMTUyYjVmZjY4YWNlNjE1YmI3YjcyNTE1MmIzYWIxN2E4NzZhZWE4YTVhYTc2ZDJlNDE3NjI5ZWM0ZWUzNDFmNTYxMzVmY2NmNjk1MjgwMTA0ZTAzMTJlY2JkYTkyNTU3YzkzODcwMTE0YWY2YzlkMDVjNGY3ZjBjMzY4NWI3YTQ2YmVlMjU1OTMyNTc1Y2NlMTBiNDI0ZDgxM2NmZTQ4NzVkM2U4MjA0N2I5N2RkZWY1Mjc0MWQ1NDZiOGUyODlkYzY5MzViM2VjZTA0NjJkYjBhMjJiOGU3J1xuICAgIHN0YXRpYyByZWFkb25seSBwdWJLZXk6c3RyaW5nID0gJzAxMDAwMScgOyAgICAgICAgLy8gcnNh5YWs6ZKlXG5cblxuICAgIC8qKlxuICAgICAqIOeUn+aIkOmaj+acuuaVsO+8jHNpemXpu5jorqQxNlxuICAgICAqIEBwYXJhbSBzaXplIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlU2VjcmV0S2V5KHNpemUgPSAxNikge1xuICAgICAgICBjb25zdCBrZXlzID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OVwiO1xuICAgICAgICBsZXQga2V5ID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSBNYXRoLnJhbmRvbSgpICoga2V5cy5sZW5ndGg7XG4gICAgICAgICAgICBwb3MgPSBNYXRoLmZsb29yKHBvcyk7XG4gICAgICAgICAgICBrZXkgPSBrZXkgKyBrZXlzLmNoYXJBdChwb3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIOS9v+eUqEFFU+WKoOWvhuWSjEJBU0U2NOe8lueggVxuICAgICAqIEBwYXJhbSB3b3JkIOWKoOWvhueahOaVsOaNrlxuICAgICAqIEBwYXJhbSBzZWNLZXkg5Yqg5a+G5a+G6ZKlXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhZXNFbmNyeXB0KHdvcmQsIHNlY0tleSkge1xuICAgICAgICBsZXQga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoc2VjS2V5KTsgIC8v5Y2B5YWt5L2N5Y2B5YWt6L+b5Yi25pWw5L2c5Li65a+G6ZKlXG4gICAgICAgIGxldCBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHRoaXMuYWVzX212KTsgICAvL+WNgeWFreS9jeWNgeWFrei/m+WItuaVsOS9nOS4uuWvhumSpeWBj+enu+mHj1xuICAgICAgICBsZXQgc3JjcyA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHdvcmQpO1xuICAgICAgICBsZXQgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQoc3Jjcywga2V5LCB7IGl2OiBpdiwgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNyB9KTtcbiAgICAgICAgbGV0IHJlcyA9IGVuY3J5cHRlZC50b1N0cmluZygpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWhq+WFhVxuICAgICAqIEBwYXJhbSBzdHIg5Y6f5aeL5a2X56ym5LiyXG4gICAgICogQHBhcmFtIHNpemUg5pyf5pyb6ZW/5bqmXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB6ZmlsbChzdHIsIHNpemUpIHtcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKSBzdHIgPSBcIjBcIiArIHN0cjtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSU0HliqDlr4ZcbiAgICAgKiBAcGFyYW0gdGV4dCDliqDlr4blhoXlrrlcbiAgICAgKiBAcGFyYW0gcHViS2V5IOWFrOmSpVxuICAgICAqIEBwYXJhbSBtb2R1bHVzIOWbuuWumuWAvFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcnNhRW5jcnlwdCh0ZXh0LCBwdWJLZXksIG1vZHVsdXMpIHtcbiAgICAgICAgY29uc3QgX3RleHQgPSB0ZXh0LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XG4gICAgICAgIGNvbnN0IGJpVGV4dCA9IEJpZ0ludChDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShfdGV4dCkudG9TdHJpbmcoKSwgMTYpLFxuICAgICAgICAgICAgYmlFeCA9IEJpZ0ludChwdWJLZXksIDE2KSxcbiAgICAgICAgICAgIGJpTW9kID0gQmlnSW50KG1vZHVsdXMsIDE2KSxcbiAgICAgICAgICAgIGJpUmV0ID0gYmlUZXh0Lm1vZFBvdyhiaUV4LCBiaU1vZCk7XG4gICAgICAgIHJldHVybiB0aGlzLnpmaWxsKGJpUmV0LnRvU3RyaW5nKDE2KSwgMjU2KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliqDlr4bnrpfms5XlhaXlj6NcbiAgICAgKiBAcGFyYW0gb2JqIOW+heWKoOWvhuWvueixoVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZW5jcnlwdChvYmopIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIGNvbnN0IHNlY0tleSA9IHRoaXMuY3JlYXRlU2VjcmV0S2V5KDE2KTtcbiAgICAgICAgbGV0IGZpcnN0UmVzID0gdGhpcy5hZXNFbmNyeXB0KHRleHQsIHRoaXMuZmlyc3RLZXkpO1xuICAgICAgICBjb25zdCBzZWNvbmRSZXMgPSB0aGlzLmFlc0VuY3J5cHQoZmlyc3RSZXMsIHNlY0tleSk7XG4gICAgICAgIGNvbnN0IGVuY1NlY0tleSA9IHRoaXMucnNhRW5jcnlwdChzZWNLZXksIHRoaXMucHViS2V5LCB0aGlzLm1vZHVsdXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFyYW1zOiBzZWNvbmRSZXMsXG4gICAgICAgICAgICBlbmNTZWNLZXk6IGVuY1NlY0tleVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbiJdfQ==